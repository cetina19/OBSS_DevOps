openapi: 3.0.3
info:
  version: 1.0.0
  title: Swagger petstore - OpenAPI 3.0
  description: Bookstore
servers:
  - url: https://my-json-server.typicode.com/dmitrijt9/book-api-mock/db
tags:
  - name: book
    description: Our books are the best
paths:
  /book:
    put:
      tags:
        - book
      summary: Change a book
      operationId: updatebook
      requestBody:
        description: Update an existent book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/book'
          application/xml:
            schema:
              $ref: '#/components/schemas/book'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/book'
        required: true
      responses:
        '200':
          description: You Updated A Book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
            application/xml:
              schema:
                $ref: '#/components/schemas/book'
        '400':
          description: Invalid ID was entered
        '404':
          description: Book not found
        '405':
          description: Exception happened
      security:
        - bookstore_auth:
            - write:books
            - read:books
    post:
      tags:
        - book
      summary: Add a new book to the store
      description: Add a new book to the store
      operationId: addbook
      requestBody:
        description: Create a new book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/book'
          application/xml:
            schema:
              $ref: '#/components/schemas/book'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/book'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
            application/xml:
              schema:
                $ref: '#/components/schemas/book'
        '405':
          description: Invalid input
      security:
        - bookstore_auth:
            - write:books
            - read:books
  /book/{bookId}:
    get:
      tags:
        - book
      summary: Find book by ID
      description: Returns a single book
      operationId: getbookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Book was searched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
            application/xml:
              schema:
                $ref: '#/components/schemas/book'
        '400':
          description: Invalid ID supplied
        '404':
          description: book not found
      security:
        - api_key: []
        - bookstore_auth:
            - write:books
            - read:books
    post:
      tags:
        - book
      summary: Updates a book in the store with form data
      description: ''
      operationId: updatebookWithForm
      parameters:
        - name: bookId
          in: path
          description: ID of book that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of book that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of book that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - bookstore_auth:
            - write:books
            - read:books
    delete:
      tags:
        - book
      summary: Deletes a book
      description: delete a book
      operationId: deletebook
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: bookId
          in: path
          description: book id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid book value
      security:
        - bookstore_auth:
            - write:books
            - read:books
  
  
  
components:
  schemas:
    Authors:
      type: object
      properties: 
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: "Ahmet"
        surname:
          type: string
          example: "Ãœmit"
    
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    book:
      required:
        - name
        - author
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        author_id:
          type: string
          example: "Oliver Twist"
        title:
          type: string
          example: 1
        cover_image:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: coverUrl
        pages:
          type: integer
          format: int64
          example: 10
        release_date:
          type: string
          example: "1839"
        isbn: 
          type: string
          example: "wt345"
      xml:
        name: book
    chapters:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        book_id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "chapter 1"
        content:
          type: string
          example: "Lorem ipsum dolar sit amet"
        
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int64
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    book:
      description: book object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/book'
        application/xml:
          schema:
            $ref: '#/components/schemas/book'
  
  securitySchemes:
    bookstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://bookstore3.swagger.io/oauth/authorize
          scopes:
            write:books: modify books in your account
            read:books: read your books
    api_key:
      type: apiKey
      name: api_key
      in: header
